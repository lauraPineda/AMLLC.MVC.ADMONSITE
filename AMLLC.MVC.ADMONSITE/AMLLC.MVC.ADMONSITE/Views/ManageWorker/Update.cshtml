@model AMLLC.MVC.ADMONSITE.Models.WorkerUpdate

@{
    Layout = "~/Views/Shared/_HeadBodyFoot.cshtml";
    ViewBag.HttpMethod = "POST";
    ViewBag.Action = "Update";
    ViewBag.HeadIcon = "fa-plus";
    ViewBag.HeadTitle = "UPDATE WORKER";
    ViewBag.Backhref = "/Menu/Administrator";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Worker Update</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group hidden">
            @Html.LabelFor(model => model.idWorker, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.idWorker, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.idWorker, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Dropdown clientes*@
        <div class="form-group">
            @Html.LabelFor(model => model.Client, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-xs-12 col-sm-7 col-md-5">
                    @Html.DropDownListFor(model => model.idClient, Model.Client, htmlAttributes: new { @class = "text-primary btn-block", @onchange = "Worker.LoadProject($(this))" })
                </div>
                @Html.ValidationMessageFor(model => model.Client, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Dropdown proyectos*@
        <div class="form-group">
            @Html.LabelFor(model => model.Project, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-xs-12 col-sm-7 col-md-5">
                    @Html.DropDownListFor(model => model.Project, Model.Project, htmlAttributes: new { @class = "text-primary btn-block", @disabled = "disabled", @onchange = "Worker.LoadLocation($(this))" })
                </div>
                @Html.ValidationMessageFor(model => model.Project, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Dropdown locaciones*@
        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-xs-12 col-sm-7 col-md-5">
                    @Html.DropDownListFor(model => model.Location, Model.Location, htmlAttributes: new { @class = "text-primary btn-block", @disabled = "disabled", @onchange = "Worker.LoadRole($(this))" })
                </div>
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        @*Dropdown roles*@
        <div class="form-group">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="col-xs-12 col-sm-7 col-md-5">
                    @Html.DropDownListFor(model => model.Role, Model.Role, htmlAttributes: new { @class = "text-primary btn-block", @disabled = "disabled" })
                </div>
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update" class="btn btn-default" />
            </div>
        </div>

        <div class="spaceBetween">
            <div class="div-validation-error text-center">
                <span class="field-validation-error">
                    @if (@Model != null)
                    { @Model.Message }
                </span>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    var Worker = {
        LoadProject: function (selectItem) {
            $.post("GetCatalog", { option: "Project", idRequest: selectItem.val() }, function (data, status) {
                var htmlItems = ""; var selectCascade = "select[name=Project]";
                Common.DisableDropDown(selectCascade);
                $.each(data, function (index, item) {
                    htmlItems += "<option value='" + item.Value + "'>" + item.Text + "</option>";
                });
                $(selectCascade).html(htmlItems);
                Common.EnableDropDown(selectCascade);
            });
        },

        LoadLocation: function (selectItem) {
            $.post("GetCatalog", { option: "Project", idRequest: selectItem.val() }, function (data, status) {
                var htmlItems = ""; var selectCascade = "select[name=Location]";
                Common.DisableDropDown(selectCascade);
                $.each(data, function (index, item) {
                    htmlItems += "<option value='" + item.Value + "'>" + item.Text + "</option>";
                });
                $(selectCascade).html(htmlItems);
                Common.EnableDropDown(selectCascade);
            });
        },

        LoadRole: function (selectItem) {
            $.post("GetCatalog", { option: "Project", idRequest: selectItem.val() }, function (data, status) {
                var htmlItems = ""; var selectCascade = "select[name=Role]";
                Common.DisableDropDown(selectCascade);
                $.each(data, function (index, item) {
                    htmlItems += "<option value='" + item.Value + "'>" + item.Text + "</option>";
                });
                $(selectCascade).html(htmlItems);
                Common.EnableDropDown(selectCascade);
            });
        }
    }
</script>